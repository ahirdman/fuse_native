drop view if exists "public"."initial_tags_with_matches";

drop view if exists "public"."matched_tags";

create table "public"."fuseTagTags" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "tag_id" bigint not null,
    "fuse_id" bigint not null
);


alter table "public"."fuseTagTags" enable row level security;

alter table "public"."fuseTags" drop column "tag_id_2";

alter table "public"."fuseTags" drop column "tag_ids";

alter table "public"."fuseTags" add column "tag_id" bigint;

CREATE UNIQUE INDEX "fuseTagTags_pkey" ON public."fuseTagTags" USING btree (id);

alter table "public"."fuseTagTags" add constraint "fuseTagTags_pkey" PRIMARY KEY using index "fuseTagTags_pkey";

alter table "public"."fuseTagTags" add constraint "public_fuseTagTags_fuse_id_fkey" FOREIGN KEY (fuse_id) REFERENCES "fuseTags"(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."fuseTagTags" validate constraint "public_fuseTagTags_fuse_id_fkey";

alter table "public"."fuseTagTags" add constraint "public_fuseTagTags_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE not valid;

alter table "public"."fuseTagTags" validate constraint "public_fuseTagTags_tag_id_fkey";

create or replace view "public"."initial_tags_with_matches" as  SELECT DISTINCT t.id,
    t.name,
    t.color
   FROM (tags t
     JOIN "trackTags" tt ON ((t.id = tt.tag_id)))
  WHERE ((EXISTS ( SELECT 1
           FROM "trackTags" tt_inner
          WHERE ((tt_inner.track_id = tt.track_id) AND (tt_inner.tag_id <> t.id)))) AND (NOT (EXISTS ( SELECT 1
           FROM "fuseTags" ft
          WHERE (((ft.tag_id_1 = t.id) AND (ft.tag_id IN ( SELECT tt_inner.tag_id
                   FROM "trackTags" tt_inner
                  WHERE ((tt_inner.track_id = tt.track_id) AND (tt_inner.tag_id <> t.id))))) OR ((ft.tag_id = t.id) AND (ft.tag_id_1 IN ( SELECT tt_inner.tag_id
                   FROM "trackTags" tt_inner
                  WHERE ((tt_inner.track_id = tt.track_id) AND (tt_inner.tag_id <> t.id))))))))));


create or replace view "public"."matched_tags" as  SELECT DISTINCT tt1.tag_id AS initial_tag_id,
    tt2.tag_id AS id,
    t2.name,
    t2.color
   FROM (("trackTags" tt1
     JOIN "trackTags" tt2 ON (((tt1.track_id = tt2.track_id) AND (tt1.tag_id <> tt2.tag_id))))
     JOIN tags t2 ON ((tt2.tag_id = t2.id)))
  WHERE (NOT (EXISTS ( SELECT 1
           FROM "fuseTags" ft
          WHERE (((ft.tag_id_1 = tt1.tag_id) AND (ft.tag_id = tt2.tag_id)) OR ((ft.tag_id_1 = tt2.tag_id) AND (ft.tag_id = tt1.tag_id))))));


grant delete on table "public"."fuseTagTags" to "anon";

grant insert on table "public"."fuseTagTags" to "anon";

grant references on table "public"."fuseTagTags" to "anon";

grant select on table "public"."fuseTagTags" to "anon";

grant trigger on table "public"."fuseTagTags" to "anon";

grant truncate on table "public"."fuseTagTags" to "anon";

grant update on table "public"."fuseTagTags" to "anon";

grant delete on table "public"."fuseTagTags" to "authenticated";

grant insert on table "public"."fuseTagTags" to "authenticated";

grant references on table "public"."fuseTagTags" to "authenticated";

grant select on table "public"."fuseTagTags" to "authenticated";

grant trigger on table "public"."fuseTagTags" to "authenticated";

grant truncate on table "public"."fuseTagTags" to "authenticated";

grant update on table "public"."fuseTagTags" to "authenticated";

grant delete on table "public"."fuseTagTags" to "service_role";

grant insert on table "public"."fuseTagTags" to "service_role";

grant references on table "public"."fuseTagTags" to "service_role";

grant select on table "public"."fuseTagTags" to "service_role";

grant trigger on table "public"."fuseTagTags" to "service_role";

grant truncate on table "public"."fuseTagTags" to "service_role";

grant update on table "public"."fuseTagTags" to "service_role";


