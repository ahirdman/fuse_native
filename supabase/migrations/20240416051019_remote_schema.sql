
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "moddatetime" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."change_user_password"("current_plain_password" character varying, "new_plain_password" character varying) RETURNS "json"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
DECLARE
_uid uuid; -- for checking by 'is not found'
user_id uuid; -- to store the user id from the request
BEGIN
  
  -- Get user by its current auth.uid and current password
  user_id := auth.uid();
  SELECT id INTO _uid
  FROM auth.users
  WHERE id = user_id
  AND encrypted_password =
  crypt(current_plain_password::text, auth.users.encrypted_password);

  -- Check the currect password
  IF NOT FOUND THEN
    RAISE EXCEPTION 'incorrect password';
  END IF;

  -- Then set the new password
  UPDATE auth.users SET 
  encrypted_password =
  crypt(new_plain_password, gen_salt('bf'))
  WHERE id = user_id;
  
  RETURN '{"data":true}';
END;
$$;

ALTER FUNCTION "public"."change_user_password"("current_plain_password" character varying, "new_plain_password" character varying) OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.users (id)
  values (new.id);
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."fuseTags" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "tag_id_1" bigint NOT NULL,
    "tag_id_2" bigint NOT NULL,
    "synced_at" timestamp with time zone,
    "latest_snapshot_id" "text",
    "spotify_playlist_id" "text",
    "spotify_playlist_uri" "text",
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."fuseTags" OWNER TO "postgres";

COMMENT ON TABLE "public"."fuseTags" IS 'User created fuseTags';

ALTER TABLE "public"."fuseTags" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."fuseTags_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."tags" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "color" "text" NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "latest_snapshot_id" "text",
    "spotify_playlist_id" "text",
    "spotify_playlist_uri" "text",
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "synced_at" timestamp with time zone
);

ALTER TABLE "public"."tags" OWNER TO "postgres";

COMMENT ON TABLE "public"."tags" IS 'user created tags';

COMMENT ON COLUMN "public"."tags"."latest_snapshot_id" IS 'latest snapshot of a spotify playlist';

CREATE TABLE IF NOT EXISTS "public"."trackTags" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "tag_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "track_id" "text" NOT NULL
);

ALTER TABLE "public"."trackTags" OWNER TO "postgres";

COMMENT ON TABLE "public"."trackTags" IS 'junction table for tracks and tags';

CREATE OR REPLACE VIEW "public"."initial_tags_with_matches" WITH ("security_invoker"='true') AS
 SELECT DISTINCT "t"."id",
    "t"."name",
    "t"."color"
   FROM ("public"."tags" "t"
     JOIN "public"."trackTags" "tt" ON (("t"."id" = "tt"."tag_id")))
  WHERE ((EXISTS ( SELECT 1
           FROM "public"."trackTags" "tt_inner"
          WHERE (("tt_inner"."track_id" = "tt"."track_id") AND ("tt_inner"."tag_id" <> "t"."id")))) AND (NOT (EXISTS ( SELECT 1
           FROM "public"."fuseTags" "ft"
          WHERE ((("ft"."tag_id_1" = "t"."id") AND ("ft"."tag_id_2" IN ( SELECT "tt_inner"."tag_id"
                   FROM "public"."trackTags" "tt_inner"
                  WHERE (("tt_inner"."track_id" = "tt"."track_id") AND ("tt_inner"."tag_id" <> "t"."id"))))) OR (("ft"."tag_id_2" = "t"."id") AND ("ft"."tag_id_1" IN ( SELECT "tt_inner"."tag_id"
                   FROM "public"."trackTags" "tt_inner"
                  WHERE (("tt_inner"."track_id" = "tt"."track_id") AND ("tt_inner"."tag_id" <> "t"."id"))))))))));

ALTER TABLE "public"."initial_tags_with_matches" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."matched_tags" WITH ("security_invoker"='true') AS
 SELECT DISTINCT "tt1"."tag_id" AS "initial_tag_id",
    "tt2"."tag_id" AS "id",
    "t2"."name",
    "t2"."color"
   FROM (("public"."trackTags" "tt1"
     JOIN "public"."trackTags" "tt2" ON ((("tt1"."track_id" = "tt2"."track_id") AND ("tt1"."tag_id" <> "tt2"."tag_id"))))
     JOIN "public"."tags" "t2" ON (("tt2"."tag_id" = "t2"."id")))
  WHERE (NOT (EXISTS ( SELECT 1
           FROM "public"."fuseTags" "ft"
          WHERE ((("ft"."tag_id_1" = "tt1"."tag_id") AND ("ft"."tag_id_2" = "tt2"."tag_id")) OR (("ft"."tag_id_1" = "tt2"."tag_id") AND ("ft"."tag_id_2" = "tt1"."tag_id"))))));

ALTER TABLE "public"."matched_tags" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."subscriptions" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "product_id" "text" NOT NULL,
    "is_sandbox" boolean NOT NULL,
    "expiration_date" timestamp with time zone,
    "will_renew" boolean NOT NULL,
    "is_active" boolean NOT NULL,
    "unsubscribed_at" timestamp with time zone,
    "billing_issue_at" timestamp with time zone,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "app_user_id" "text",
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL
);

ALTER TABLE "public"."subscriptions" OWNER TO "postgres";

ALTER TABLE "public"."tags" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tags_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."tags_with_track_ids" WITH ("security_invoker"='true') AS
 SELECT "tags"."id",
    "tags"."created_at",
    "tags"."name",
    "tags"."color",
    "tags"."user_id",
    "array_agg"("trackTags"."track_id") FILTER (WHERE ("trackTags"."track_id" IS NOT NULL)) AS "track_ids"
   FROM ("public"."tags"
     LEFT JOIN "public"."trackTags" ON (("tags"."id" = "trackTags"."tag_id")))
  GROUP BY "tags"."id", "tags"."created_at", "tags"."name", "tags"."color", "tags"."user_id";

ALTER TABLE "public"."tags_with_track_ids" OWNER TO "postgres";

ALTER TABLE "public"."trackTags" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."trackTags_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."track_tags_view" WITH ("security_invoker"='true') AS
 SELECT DISTINCT "trackTags"."track_id"
   FROM "public"."trackTags";

ALTER TABLE "public"."track_tags_view" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."tracks" (
    "name" "text",
    "artist" "text",
    "id" "text" NOT NULL,
    "explicit" boolean DEFAULT false NOT NULL,
    "album" "text",
    "duration" bigint NOT NULL,
    "album_covers" "text"[],
    "uri" "text" DEFAULT ''::"text" NOT NULL
);

ALTER TABLE "public"."tracks" OWNER TO "postgres";

COMMENT ON TABLE "public"."tracks" IS 'Holds all tagged tracks';

COMMENT ON COLUMN "public"."tracks"."duration" IS 'track duration in ms';

COMMENT ON COLUMN "public"."tracks"."uri" IS 'Uri to the spotify track';

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "spotify_refresh_token" "text",
    "spotify_token_data" "jsonb",
    "spotify_user_id" "text",
    "subscription" "uuid"
);

ALTER TABLE "public"."users" OWNER TO "postgres";

COMMENT ON TABLE "public"."users" IS 'Extends auth storage with additional user properties';

ALTER TABLE ONLY "public"."fuseTags"
    ADD CONSTRAINT "fuseTags_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."subscriptions"
    ADD CONSTRAINT "subscriptions_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tags"
    ADD CONSTRAINT "tags_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."trackTags"
    ADD CONSTRAINT "trackTags_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tracks"
    ADD CONSTRAINT "tracks_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

CREATE OR REPLACE TRIGGER "update_updated_at" BEFORE UPDATE ON "public"."tags" FOR EACH ROW EXECUTE FUNCTION "storage"."update_updated_at_column"();

ALTER TABLE ONLY "public"."fuseTags"
    ADD CONSTRAINT "public_fuseTags_tag_id_1_fkey" FOREIGN KEY ("tag_id_1") REFERENCES "public"."tags"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."fuseTags"
    ADD CONSTRAINT "public_fuseTags_tag_id_2_fkey" FOREIGN KEY ("tag_id_2") REFERENCES "public"."tags"("id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."fuseTags"
    ADD CONSTRAINT "public_fuseTags_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."tags"
    ADD CONSTRAINT "public_tags_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."trackTags"
    ADD CONSTRAINT "public_trackTags_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "public_users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."trackTags"
    ADD CONSTRAINT "trackTags_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."tags"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_subscription_fkey" FOREIGN KEY ("subscription") REFERENCES "public"."subscriptions"("id") ON UPDATE CASCADE ON DELETE SET NULL;

CREATE POLICY "Enable all actions for authenticated users only" ON "public"."tracks" TO "authenticated" USING (true) WITH CHECK (true);

CREATE POLICY "Enable all actions for users based on user_id" ON "public"."users" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Enable all operations for users based on user_id" ON "public"."subscriptions" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."fuseTags" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."tags" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable delete for users based on user_id" ON "public"."trackTags" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."fuseTags" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."subscriptions" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."tags" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."trackTags" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable read access for authenticated users" ON "public"."trackTags" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable select for users based on user_id" ON "public"."fuseTags" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable select for users based on user_id" ON "public"."tags" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."fuseTags" FOR UPDATE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Enable update for users based on user_id" ON "public"."tags" FOR UPDATE USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));

ALTER TABLE "public"."fuseTags" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."subscriptions" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tags" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."trackTags" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tracks" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."change_user_password"("current_plain_password" character varying, "new_plain_password" character varying) TO "anon";
GRANT ALL ON FUNCTION "public"."change_user_password"("current_plain_password" character varying, "new_plain_password" character varying) TO "authenticated";
GRANT ALL ON FUNCTION "public"."change_user_password"("current_plain_password" character varying, "new_plain_password" character varying) TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."fuseTags" TO "anon";
GRANT ALL ON TABLE "public"."fuseTags" TO "authenticated";
GRANT ALL ON TABLE "public"."fuseTags" TO "service_role";

GRANT ALL ON SEQUENCE "public"."fuseTags_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."fuseTags_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."fuseTags_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."tags" TO "anon";
GRANT ALL ON TABLE "public"."tags" TO "authenticated";
GRANT ALL ON TABLE "public"."tags" TO "service_role";

GRANT ALL ON TABLE "public"."trackTags" TO "anon";
GRANT ALL ON TABLE "public"."trackTags" TO "authenticated";
GRANT ALL ON TABLE "public"."trackTags" TO "service_role";

GRANT ALL ON TABLE "public"."initial_tags_with_matches" TO "anon";
GRANT ALL ON TABLE "public"."initial_tags_with_matches" TO "authenticated";
GRANT ALL ON TABLE "public"."initial_tags_with_matches" TO "service_role";

GRANT ALL ON TABLE "public"."matched_tags" TO "anon";
GRANT ALL ON TABLE "public"."matched_tags" TO "authenticated";
GRANT ALL ON TABLE "public"."matched_tags" TO "service_role";

GRANT ALL ON TABLE "public"."subscriptions" TO "anon";
GRANT ALL ON TABLE "public"."subscriptions" TO "authenticated";
GRANT ALL ON TABLE "public"."subscriptions" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."tags_with_track_ids" TO "anon";
GRANT ALL ON TABLE "public"."tags_with_track_ids" TO "authenticated";
GRANT ALL ON TABLE "public"."tags_with_track_ids" TO "service_role";

GRANT ALL ON SEQUENCE "public"."trackTags_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."trackTags_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."trackTags_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."track_tags_view" TO "anon";
GRANT ALL ON TABLE "public"."track_tags_view" TO "authenticated";
GRANT ALL ON TABLE "public"."track_tags_view" TO "service_role";

GRANT ALL ON TABLE "public"."tracks" TO "anon";
GRANT ALL ON TABLE "public"."tracks" TO "authenticated";
GRANT ALL ON TABLE "public"."tracks" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
